local CallSigns = {}

local callSign = '0'
local thirsty = 1
local hungry = 1
local infect = 1
local ill = 1
local visibley = false
local vall = 0
AddEventHandler('gameEventTriggered', function (name, args)
    print('game event ' .. name .. ' (' .. json.encode(args) .. ')')

  end)
AddEventHandler('onClientResourceStop', function(resourceName)
    print('The resource ' .. resourceName .. ' has been stopped on the client.')

    end)

local VORPCore = {}
local vuser = nil
local vident = nil
local vgroup = nil
local ruser = nil
if JJRedConfig.Plugins.redemrp then
    AddEventHandler('onResourceStart', function(resourceName)
       if resourceName == "redem" then  print("^2[JJsCoolHud] ^0RedEmRP hooked successfully!") end
    end)
    local _source = source

    --[[AddEventHandler('playerJoining', function()
        TriggerEvent('redemrp:getPlayerFromId', source, function(user)
if user ~= nil then 
    print("^2[JJsCoolHud] ^0RedEmRP hooked successfully!")
            vuser = user
end
        end)
    end)]]
    RegisterCommand('jjtest', function(source, args, rawCommand)
        local source = source
        args = table.concat(args, ' ')
        TriggerEvent('redemrp:getPlayerFromId', source, function(user)
          if user ~= nil then 
             ruser = user
            TriggerClientEvent('jjshud:testcmd', source, ruser)
          end
            
         end)
        -- TriggerClientEvent("poke_rpchat:sendReport", -1, source, name, args)

    end, false)
end
if JJRedConfig.Plugins.VORP then
    --  VorpInv = exports.vorp_inventory:vorp_inventoryApi()

    TriggerEvent("getCore", function(core) VorpCore = core end)

    RegisterServerEvent("jjred:getVorp")
    AddEventHandler("jjred:getVorp", function()
        TriggerClientEvent("jjred:gotVorp", source, VorpCore)
    end)

    RegisterCommand('jjvtest', function(source, args, rawCommand)
        local source = source
        args = table.concat(args, ' ')
        name = GetPlayerName(source)
        User = VorpCore.getUser(source)
        Character = User.getUsedCharacter
        playerName = Character.firstname .. ' ' .. Character.lastname
    
        -- TriggerClientEvent("poke_rpchat:sendReport", -1, source, name, args)

    end, false)
end
ESX = nil
local name = nil
local User = nil
local Character = nil
local playerName = nil
if JJRedConfig.Plugins.ESX then
    TriggerEvent('esx:getSharedObject', function(obj) ESX = obj end)
end
--[[
    üõ°Ô∏è
    üßß
callsign = 'ü•õ' .. thirsty, -- callSign,
name = name,
job = 'ü•£' .. hungry, -- jobname,
rank = 'üå°Ô∏è' .. ill, -- rank,
visible = visibley,
data1 = xPlayer.getMoney(),
life = GetEntityHealth(GetPlayerPed(v)),
data3 = GetPedArmour(GetPlayerPed(v)),
data4 = xPlayer.getGroup())
]]
-- Client action (add / remove) so the client can be in sync with server

RegisterServerEvent("jjred:action")
AddEventHandler("jjred:action", function(data)
    if data.action == "error" then TriggerEvent('jjred:sendError', data.code) end
end)

RegisterServerEvent("jjred:showhud")
AddEventHandler("jjred:showhud", function(hudx)

    TriggerClientEvent("jjred:showhud", source, hudx)
end)


RegisterServerEvent("jjred:statshud")
AddEventHandler("jjred:statshud", function(invincable,data001,data002, data003, data004,data005,data006, data007, data008,data009,data0010, data0011, data0012)
    TriggerEvent('redemrp:getPlayer',source, function(user)
        if user ~= nil then 
            print("not nil")
           ruser = user
          TriggerClientEvent('jjshud:testcmd', -1, ruser)
        end
    end)
    local data = {}
    local value = 0
    local src = source
    local visibley = invincable
    local namer = GetPlayerName(src)
   -- local data01 = 'üõ°Ô∏è: ' .. GetPedArmour(GetPlayerPed(-1))
   local data01 = data001
   local data02 = data002
    local data03 = data003
    local data04 = data004
    local data05 = data005
    local data06 = data006
     local data07 = data007
     local data08 = data008
     local data09 = data009
     local data010 = data0010
      local data011 = data0011
      local data012 = data0012
    table.insert(data, {
        name = namer,
        visible = visibley,
        data1 = data01,
        data2 = data02,
        data3 = data03,
        data4 = data04,
        data5 = data05,
        data6 = data06,
        data7 = data07,
        data8= data08,
        data9 = data09,
        data10 = data010,
        data11 = data011,
        data12= data012
    })

    TriggerClientEvent("jjred:addmstatshud", -1, data)
end)

RegisterServerEvent("jjred:addme")
AddEventHandler("jjred:addme", function(vis, p, data003, data004)

    local data = {}
    local value = 0
    local src = source
    local visibley = vis
    local namer = GetPlayerName(src)
    local data01 = 'üõ°Ô∏è: ' .. GetPedArmour(GetPlayerPed(-1))
    local data03 = data003
    local data04 = data004

    table.insert(data, {
        name = namer,
        visible = visibley,
        life = GetEntityHealth(GetPlayerPed(-1)),
        data1 = data01,
        data3 = data03,
        data4 = data04
    })

    TriggerClientEvent("jjred:updateme", -1, data)
end)

RegisterServerEvent("jjred:add")
AddEventHandler("jjred:add", function(vis, sp, data003, data004)
    local data = {}
    -- GetActivePlayers()
    
    for k, v in pairs(GetPlayers()) do

        local data = {}
        local value = 0

        local visibley = vis
        local namer = GetPlayerName(k)
        local data01 = 'üõ°Ô∏è: ' .. GetPedArmour(GetPlayerPed(k))
        local data03 = data003
        local data04 = data004

        table.insert(data, {
            name = namer,
            visible = visibley,
            life = GetEntityHealth(GetPlayerPed(k)),
            data1 = data01,
            data3 = data03,
            data4 = data04
        })

    end

    TriggerClientEvent("jjred:update", -1, data)
end)
